module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
   sig rst;
  counter slowclock(#SIZE(1),#DIV(26), .clk(clk), .rst(rst));  
  alu_tester alu_tester(.clk(slowclock.value), .rst(io_button[0]));//top button to reset the auto tester
  alu alu;
  multi_seven_seg disp(.clk(clk), .rst(rst));
  //manual_tester MT((.clk(slowclock.value), .;
  fsm state (.clk(clk), .rst(rst)) = {START_MAN, ENTER_A, ENTER_B,ENTER_ALUFN, RESULT,START_AUTO}; 
  dff inp_a[16](.clk(clk), .rst(rst));  // to store value a
  dff inp_b[16](.clk(clk), .rst(rst));  // to store value b             
  dff inp_alufn[6](.clk(clk), .rst(rst));  // to store value alufn            

    .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
  }
  // Manual testing
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    usb_tx = usb_rx;        // loop serial port
    led = 8h00;             // turn LEDs off
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = ~disp.seg;      //initialising
    io_sel = ~disp.sel;
    alu.a = 0;                        
    alu.b = 0;
    alu.alufn_signal = 0; 
    disp.values = {8h0,8h0,8h0,8h0};
    alu_tester.start=0;
    
    
     case(io_dip[2][7]){         
      b0://starting manual testing
      alu_tester.start=0;
      case(state.q){
          state.START_MAN:
          disp.values = {8h8,8h4,8h9,8h5}; //show currect state IDLE
          if (io_button[0] == 1) {
          state.d = state.ENTER_A;        // when top button is pressed, state will change to ENTER_A
          }  
          
        state.ENTER_A:
          disp.values = {8h0,8h0,8h0,8h1};//shows currect state A
          io_led[1]= io_dip[1];      // displays input given
          io_led[0]= io_dip[0];
          inp_a.d = c{io_dip[1][7:0], io_dip[0][7:0]};  // puts value of dip to input a
        
          if (io_button[4] == 1) {         // when left button is pressed, state will change to ENTERB
            state.d = state.ENTER_B;
          } 
          else if (io_button[1] == 1) {  // LEFT button became the reset button
            state.d = state.START_MAN;
          }
        
        state.ENTER_B:
          disp.values = {8h0,8h0,8h0,8h2}; //show currect state B
          io_led[1][7:0] = io_dip[1];     // displays input given
          io_led[0][7:0] = io_dip[0];
          inp_b.d = c{io_dip[1][7:0], io_dip[0][7:0]};  // puts value of dip to input b
        
          if (io_button[2] == 1) {
            state.d = state.ENTER_ALUFN;     // when down button is pressed, state will change to ALUFN
          }
          else if (io_button[1] == 1) {
            state.d = state.START_MAN;
          }
            
        state.ENTER_ALUFN:
          disp.values = {8h1,8h9,8hF,8h6};// //show currect state ALUFN
          io_led[2][5:0] = io_dip[2][5:0];// displays input given
          inp_alufn.d =io_dip[2][5:0]; // puts value of dip to input alufn
       
          if (io_button[3] == 1) {
            state.d = state.RESULT;     // when right button is pressed, state will change to result
          }
          else if (io_button[1] == 1) {
            state.d = state.START_MAN;
          }
              
        state.RESULT:
          disp.values = {8hD,8h5,8h7,8hE}; //show currect RESULT
          alu.a = inp_a.q;                 
          alu.b = inp_b.q;
          alu.alufn_signal = inp_alufn.q;      // taking the dip value as ALUFN value
         io_led[2][2]=alu.z;
         io_led[2][1]=alu.v;
            io_led[2][0]=alu.n;
          io_led[1] = alu.out[15:8];       // visual representation of the output
          io_led[0] = alu.out[7:0];
        
          if (io_button[1] == 1) {
            state.d = state.START_MAN;
          }               
        }
      b1://starting auto testing
          alu_tester.start=b1;
          io_led[1:0]=alu_tester.io_led[1:0];
          if(alu_tester.result==01){//fail
          disp.values = {8h6,8h1,8h8,8h9};
          }
          else if(alu_tester.result==10){//pass
          disp.values={8hB,8h1,8hE,8hF5};
          }     
   }
}

        

