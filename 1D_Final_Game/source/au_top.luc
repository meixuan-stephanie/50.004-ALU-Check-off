module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
//    output io_seg [8],      // 7-segment LEDs on IO Shield
 //   output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output led_player_1[5],// connected to 5 led of player 1 
    output led_player_2[5],// connected to 5 led of player 2 
    input button_player_1[5],        //player 1 inputs
    input button_player_2[5],      //player 1 inputs
    input switch,
    output seg[8],      // 7-segment LEDs on IO Shield
    output sel[4]  
  ) {
  
  sig rst;                  // reset signal
  auto_game game(.clk(clk), .rst(rst)) ;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = game.io_led;    // connect io led to game
    seg = game.seg;    //connect io seg to game
    sel = game.sel;           // connect io sel to game
    
    game.io_dip=io_dip;
    game.button_player_1=button_player_1;
    game.button_player_2=button_player_2;
    game.switch=switch;
    
    led_player_1=game.led_player_1;
    led_player_2=game.led_player_2;
    
    
    
  }
}